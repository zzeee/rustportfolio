use piet::{Color, Error, FixedGradient, FixedLinearGradient, FixedRadialGradient, FontFamily, FontWeight, GradientStop, ImageFormat, InterpolationMode, RenderContext, Text, TextAttribute, TextLayout, TextLayoutBuilder};
use piet::kurbo::{Affine, BezPath, Line, Point, Rect, RoundedRect, Size, Vec2};
use crate::{console_log, loglog, utils::main::{log}};



use wasm_bindgen::prelude::*;
use wasm_bindgen::JsCast;
use web_sys::{console, window, HtmlCanvasElement};

use piet_web::WebRenderContext;

const BLUE: Color = Color::rgb8(0x00, 0x00, 0x80);
const GREEN: Color = Color::rgb8(0x00, 0x80, 0x00);
const BLUE_ALPHA: Color = Color::rgba8(0x00, 0x00, 0x80, 0xC0);
const RED_ALPHA: Color = Color::rgba8(0x80, 0x00, 0x00, 0xC0);
const YELLOW_ALPHA: Color = Color::rgba8(0xCF, 0xCF, 0x00, 0x60);



static TEXT: &str = r#"100200300400500
600700800900950"#;

pub const SIZE: Size = Size::new(400., 200.);

pub fn draw<R: RenderContext>(rc: &mut R) -> Result<(), Error> {
    rc.clear(None, Color::WHITE);
    let stops = vec![
        GradientStop {
            pos: 0.0,
            color: Color::WHITE,
        },
        GradientStop {
            pos: 1.0,
            color: Color::RED,
        },
    ];
    let gradient = rc.gradient(FixedGradient::Radial(FixedRadialGradient {
        center: Point::new(30.0, 30.0),
        origin_offset: Vec2::new(10.0, 10.0),
        radius: 30.0,
        stops,
    }))?;
    rc.fill(Rect::new(0.0, 0.0, 60.0, 60.0), &gradient);
    let stops2 = vec![
        GradientStop {
            pos: 0.0,
            color: Color::WHITE,
        },
        GradientStop {
            pos: 1.0,
            color: Color::BLACK,
        },
    ];
    let gradient2 = rc.gradient(FixedGradient::Linear(FixedLinearGradient {
        start: Point::new(0.0, 0.0),
        end: Point::new(60.0, 0.0),
        stops: stops2,
    }))?;
    rc.fill(Rect::new(0.0, 80.0, 60.0, 100.0), &gradient2);
    // rc.finish().expect("TODO: panic message");
    Ok(())
}



pub fn runrun() {
    loglog!("runrun");
    let document = window().unwrap().document().unwrap();

    let window = window().unwrap();

    let canvas0 = document
        .create_element("canvas").unwrap();
    canvas0.set_id("piet testtetsAAA");
    loglog!("runrun000");
    let canvas = canvas0.dyn_into::<HtmlCanvasElement>().unwrap();
    document.body().unwrap().append_child(&canvas).unwrap();

    loglog!("runrun1");

    let mut context = canvas
        .get_context("2d")
        .unwrap()
        .unwrap()
        .dyn_into::<web_sys::CanvasRenderingContext2d>()
        .unwrap();
    loglog!("runrun12");

    let dpr = window.device_pixel_ratio();
    canvas.set_width((canvas.offset_width() as f64 * dpr) as u32);
    canvas.set_height((canvas.offset_height() as f64 * dpr) as u32);
    let _ = context.scale(dpr, dpr);

    let mut piet_context = WebRenderContext::new(context, window);
    // run_tests(&mut piet_context);
    loglog!("runrun13");

    // TODO: make the test picture selectable
    draw(&mut piet_context).unwrap();
    let rs: &[u8] = &[];
    loglog!("piet runrun14");

    piet_context.finish().unwrap();
    loglog!("piet runrun15");

    // piet_context.make_image(400,300,rs, ImageFormat::RgbaSeparate).unwrap();
}
